@page "/parentAccountCredentials/{parentAccountId}/{dependentId}"
@using Microsoft.Extensions.Logging
@using System.Text.Json.Serialization
@using System.Text
@using Newtonsoft.Json
@inject ILogger<Index> Logger
@inject NavigationManager UriHelper
@inject HttpClient _httpClient

<PageTitle>Account Credentials</PageTitle>

<h1>Account Credentials</h1>
<br/>

<EditForm Model="@credentialModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>Email: </div>    
    <InputText id="name" @bind-Value="credentialModel.Email" />
    <div>Password: </div>    
    <InputText id="name" @bind-Value="credentialModel.Password" />
    <div>Security Question:</div>
    <InputText id="name" @bind-Value="credentialModel.SecurityQuestion" />
    <div>Security Answer:</div>
    <InputText id="name" @bind-Value="credentialModel.SecurityAnswer" />
    <div>Parent/Guardian: I confirm ... </div>
    <InputText id="name" @bind-Value="credentialModel.ParentConfirmation" />
    <div>Health Data Notice: I confirm ... </div>
    <InputText id="name" @bind-Value="credentialModel.HealthDataConfirmation" />
    <div>I have read and accept Terms of Service </div>
    <InputText id="name" @bind-Value="credentialModel.TermsOfService" />
    <br/>
    <br/>

    <button type="submit">Next</button>
</EditForm>

@code {
    [Parameter]
    public string parentAccountId{ get; set; }

    [Parameter]
    public string dependentId{ get; set; }


    private CredentialModel credentialModel = new();


    private async Task HandleValidSubmit()
    {
        credentialModel.ParentId = parentAccountId;
        credentialModel.DependentId = dependentId;

        var response = await _httpClient.PostAsync($"https://localhost:7083/api/Accounts/personal/completeCreatingParentAccount", 
            new StringContent(JsonConvert.SerializeObject(credentialModel), Encoding.UTF8, "application/json"));

        if (!response.IsSuccessStatusCode)
        {
            throw new Exception($"completeCreatingClinicAccount failed for account: {parentAccountId}");
        }

        UriHelper.NavigateTo($"/parentAccountCreated/{parentAccountId}/{dependentId}");
    }

    private class CredentialModel
    {
        public string ParentId { get; set; }
        public string DependentId { get; set; }
        public string Email { get; set; } = "john.bohnam@gmail.com";
        public string Password { get; set; } = "hi-hat1";
        public string SecurityQuestion { get; set; } = "best band of all times";
        public string SecurityAnswer { get; set; } = "led zeppelin";
        public string ParentConfirmation { get; set; } = "true";
        public string HealthDataConfirmation { get; set; } = "true";
        public string TermsOfService { get; set; } = "accepted";
    }
}
